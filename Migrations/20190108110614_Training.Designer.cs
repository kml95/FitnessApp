// <auto-generated />
using System;
using FitnessApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190108110614_Training")]
    partial class Training
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitnessApp.Models.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("DietCurrent");

                    b.Property<int>("Meals");

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Muscle");

                    b.Property<string>("Name");

                    b.Property<int>("Stage");

                    b.HasKey("Id");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Muscle = 0,
                            Name = "Wyciskanie sztangi leżąc na ławce poziomej",
                            Stage = 1
                        },
                        new
                        {
                            Id = 2,
                            Muscle = 0,
                            Name = "Wyciskanie sztangielek leżąc na ławce poziomej",
                            Stage = 2
                        },
                        new
                        {
                            Id = 3,
                            Muscle = 0,
                            Name = "Rozpiętki ze sztangielkami leżąc na ławce skośnej (głową do góry)",
                            Stage = 3
                        },
                        new
                        {
                            Id = 4,
                            Muscle = 0,
                            Name = "Wyciskanie sztangi leżąc na ławce skośnej (głową w górę)",
                            Stage = 1
                        },
                        new
                        {
                            Id = 5,
                            Muscle = 0,
                            Name = "Krzyżowanie linek wyciągu w staniu",
                            Stage = 2
                        },
                        new
                        {
                            Id = 6,
                            Muscle = 0,
                            Name = "Rozpiętki w siadzie na maszynie",
                            Stage = 3
                        },
                        new
                        {
                            Id = 7,
                            Muscle = 1,
                            Name = "Podciąganie na drążku szerokim uchwytem (nachwyt)",
                            Stage = 1
                        },
                        new
                        {
                            Id = 8,
                            Muscle = 1,
                            Name = "Podciąganie sztangi w opadzie (wiosłowanie)",
                            Stage = 2
                        },
                        new
                        {
                            Id = 9,
                            Muscle = 1,
                            Name = "Przyciąganie linki wyciągu dolnego w siadzie płaskim",
                            Stage = 3
                        },
                        new
                        {
                            Id = 10,
                            Muscle = 1,
                            Name = "Martwy ciąg",
                            Stage = 1
                        },
                        new
                        {
                            Id = 11,
                            Muscle = 1,
                            Name = "Ściąganie drążka wyciągu górnego w siadzie podchwytem",
                            Stage = 2
                        },
                        new
                        {
                            Id = 12,
                            Muscle = 1,
                            Name = "Podciąganie sztangielek w opadzie (wiosłowanie)",
                            Stage = 3
                        },
                        new
                        {
                            Id = 13,
                            Muscle = 3,
                            Name = "Wyciskanie sztangi sprzed głowy",
                            Stage = 1
                        },
                        new
                        {
                            Id = 14,
                            Muscle = 3,
                            Name = "Unoszenie sztangielek bokiem w górę",
                            Stage = 2
                        },
                        new
                        {
                            Id = 15,
                            Muscle = 3,
                            Name = "Unoszenie sztangielek w opadzie tułowia",
                            Stage = 3
                        },
                        new
                        {
                            Id = 16,
                            Muscle = 3,
                            Name = "Wyciskanie sztangielek siedząc",
                            Stage = 1
                        },
                        new
                        {
                            Id = 17,
                            Muscle = 3,
                            Name = "Podciąganie sztangi wzdłuż tułowia",
                            Stage = 2
                        },
                        new
                        {
                            Id = 18,
                            Muscle = 3,
                            Name = "Podciąganie sztangielek wzdłuż tułowia w opadzie",
                            Stage = 3
                        },
                        new
                        {
                            Id = 19,
                            Muscle = 2,
                            Name = "Przysiady ze sztangą na barkach",
                            Stage = 1
                        },
                        new
                        {
                            Id = 20,
                            Muscle = 2,
                            Name = "Przysiady wykroczne ze sztangielkami",
                            Stage = 2
                        },
                        new
                        {
                            Id = 21,
                            Muscle = 2,
                            Name = "Odwodzenie nóg na zewnątrz",
                            Stage = 3
                        },
                        new
                        {
                            Id = 22,
                            Muscle = 2,
                            Name = "Przysiady ze sztangą trzymaną z przodu",
                            Stage = 1
                        },
                        new
                        {
                            Id = 23,
                            Muscle = 2,
                            Name = "Prostowanie nóg w siadzie",
                            Stage = 2
                        },
                        new
                        {
                            Id = 24,
                            Muscle = 2,
                            Name = "Wspięcia na palce stojąc",
                            Stage = 3
                        },
                        new
                        {
                            Id = 25,
                            Muscle = 4,
                            Name = "Uginanie ramion ze sztangą stojąc podchwytem",
                            Stage = 1
                        },
                        new
                        {
                            Id = 26,
                            Muscle = 4,
                            Name = "Uginanie ramion ze sztangielkami stojąc (uchwyt młotkowy)",
                            Stage = 2
                        },
                        new
                        {
                            Id = 27,
                            Muscle = 4,
                            Name = "Uginanie ramienia ze sztangielką w siadzie (podpora o kolano)",
                            Stage = 3
                        },
                        new
                        {
                            Id = 28,
                            Muscle = 4,
                            Name = "Uginanie ramion ze sztangą łamaną, stojąc",
                            Stage = 1
                        },
                        new
                        {
                            Id = 29,
                            Muscle = 4,
                            Name = "Uginanie ramienia ze sztangielką na modlitewniku",
                            Stage = 2
                        },
                        new
                        {
                            Id = 30,
                            Muscle = 4,
                            Name = "Uginanie ramion ze sztangą nachwytem stojąc",
                            Stage = 3
                        },
                        new
                        {
                            Id = 31,
                            Muscle = 5,
                            Name = "Prostowanie ramion na wyciągu stojąc",
                            Stage = 1
                        },
                        new
                        {
                            Id = 32,
                            Muscle = 5,
                            Name = "Wyciskanie leżąc na ławce poziomej wąskim uchwytem",
                            Stage = 2
                        },
                        new
                        {
                            Id = 33,
                            Muscle = 5,
                            Name = "Wyciskanie francuskie jednorącz sztangielki w siadzie",
                            Stage = 3
                        },
                        new
                        {
                            Id = 34,
                            Muscle = 5,
                            Name = "Wyciskanie francuskie sztangi leżąc",
                            Stage = 1
                        },
                        new
                        {
                            Id = 35,
                            Muscle = 5,
                            Name = "Pompki na poręczach",
                            Stage = 2
                        },
                        new
                        {
                            Id = 36,
                            Muscle = 5,
                            Name = "Prostowanie ramienia ze sztangielką w opadzie tułowia",
                            Stage = 3
                        },
                        new
                        {
                            Id = 37,
                            Muscle = 6,
                            Name = "Unoszenie nóg w zwisie na drążku",
                            Stage = 1
                        },
                        new
                        {
                            Id = 38,
                            Muscle = 6,
                            Name = "Brzuszki",
                            Stage = 2
                        },
                        new
                        {
                            Id = 39,
                            Muscle = 6,
                            Name = "Skłony boczne ze sztangielkami",
                            Stage = 3
                        },
                        new
                        {
                            Id = 40,
                            Muscle = 6,
                            Name = "Przyciąganie kolan do klatki w zwisie na drążku",
                            Stage = 1
                        },
                        new
                        {
                            Id = 41,
                            Muscle = 6,
                            Name = "Skłony tułowia na ławce skośnej",
                            Stage = 2
                        },
                        new
                        {
                            Id = 42,
                            Muscle = 6,
                            Name = "Unoszenie nóg leżąc na podłodze",
                            Stage = 3
                        });
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.ExerciseTraining", b =>
                {
                    b.Property<int>("ExerciseId");

                    b.Property<int>("TrainingId");

                    b.HasKey("ExerciseId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("ExerciseTraining");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Proportions");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.MealDiet", b =>
                {
                    b.Property<int>("MealId");

                    b.Property<int>("DietId");

                    b.HasKey("MealId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("MealDiets");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories");

                    b.Property<int>("Carbohydrates");

                    b.Property<int>("Category");

                    b.Property<int>("Fat");

                    b.Property<string>("Name");

                    b.Property<int>("Protein");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.ProductMeal", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("MealId");

                    b.HasKey("ProductId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("ProductMeals");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Aim");

                    b.Property<DateTime>("Created");

                    b.Property<int>("Days");

                    b.Property<string>("Name");

                    b.Property<bool>("TrainingCurrent");

                    b.Property<int>("UserId");

                    b.Property<string>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.Diet", b =>
                {
                    b.HasOne("FitnessApp.Models.Entities.AppUser", "User")
                        .WithMany("Diets")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.ExerciseTraining", b =>
                {
                    b.HasOne("FitnessApp.Models.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseTrainings")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessApp.Models.Entities.Training", "Training")
                        .WithMany("ExerciseTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.MealDiet", b =>
                {
                    b.HasOne("FitnessApp.Models.Entities.Diet", "Diet")
                        .WithMany("MealDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessApp.Models.Entities.Meal", "Meal")
                        .WithMany("MealDiets")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.ProductMeal", b =>
                {
                    b.HasOne("FitnessApp.Models.Entities.Meal", "Meal")
                        .WithMany("ProductMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessApp.Models.Entities.Product", "Product")
                        .WithMany("ProductMeals")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitnessApp.Models.Entities.Training", b =>
                {
                    b.HasOne("FitnessApp.Models.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessApp.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessApp.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessApp.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessApp.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
